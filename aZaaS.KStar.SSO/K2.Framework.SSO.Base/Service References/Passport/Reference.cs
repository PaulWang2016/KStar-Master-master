//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.34014
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace K2.Framework.SSO.Base.Passport {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Passport.ITokenService")]
    public interface ITokenService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITokenService/HasLoginedByToken", ReplyAction="http://tempuri.org/ITokenService/HasLoginedByTokenResponse")]
        string HasLoginedByToken(string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITokenService/HasLoginedByToken", ReplyAction="http://tempuri.org/ITokenService/HasLoginedByTokenResponse")]
        System.Threading.Tasks.Task<string> HasLoginedByTokenAsync(string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITokenService/HasLoginedByUserAccount", ReplyAction="http://tempuri.org/ITokenService/HasLoginedByUserAccountResponse")]
        string HasLoginedByUserAccount(string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITokenService/HasLoginedByUserAccount", ReplyAction="http://tempuri.org/ITokenService/HasLoginedByUserAccountResponse")]
        System.Threading.Tasks.Task<string> HasLoginedByUserAccountAsync(string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITokenService/Login", ReplyAction="http://tempuri.org/ITokenService/LoginResponse")]
        string Login(string systemCode, string userAccount, string tokenID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITokenService/Login", ReplyAction="http://tempuri.org/ITokenService/LoginResponse")]
        System.Threading.Tasks.Task<string> LoginAsync(string systemCode, string userAccount, string tokenID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITokenService/LoginOut", ReplyAction="http://tempuri.org/ITokenService/LoginOutResponse")]
        void LoginOut(string systemCode, string userAccount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITokenService/LoginOut", ReplyAction="http://tempuri.org/ITokenService/LoginOutResponse")]
        System.Threading.Tasks.Task LoginOutAsync(string systemCode, string userAccount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITokenService/LoginOutByToken", ReplyAction="http://tempuri.org/ITokenService/LoginOutByTokenResponse")]
        bool LoginOutByToken(string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITokenService/LoginOutByToken", ReplyAction="http://tempuri.org/ITokenService/LoginOutByTokenResponse")]
        System.Threading.Tasks.Task<bool> LoginOutByTokenAsync(string token);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITokenServiceChannel : K2.Framework.SSO.Base.Passport.ITokenService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TokenServiceClient : System.ServiceModel.ClientBase<K2.Framework.SSO.Base.Passport.ITokenService>, K2.Framework.SSO.Base.Passport.ITokenService {
        
        public TokenServiceClient() {
        }
        
        public TokenServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TokenServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TokenServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TokenServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string HasLoginedByToken(string token) {
            return base.Channel.HasLoginedByToken(token);
        }
        
        public System.Threading.Tasks.Task<string> HasLoginedByTokenAsync(string token) {
            return base.Channel.HasLoginedByTokenAsync(token);
        }
        
        public string HasLoginedByUserAccount(string token) {
            return base.Channel.HasLoginedByUserAccount(token);
        }
        
        public System.Threading.Tasks.Task<string> HasLoginedByUserAccountAsync(string token) {
            return base.Channel.HasLoginedByUserAccountAsync(token);
        }
        
        public string Login(string systemCode, string userAccount, string tokenID) {
            return base.Channel.Login(systemCode, userAccount, tokenID);
        }
        
        public System.Threading.Tasks.Task<string> LoginAsync(string systemCode, string userAccount, string tokenID) {
            return base.Channel.LoginAsync(systemCode, userAccount, tokenID);
        }
        
        public void LoginOut(string systemCode, string userAccount) {
            base.Channel.LoginOut(systemCode, userAccount);
        }
        
        public System.Threading.Tasks.Task LoginOutAsync(string systemCode, string userAccount) {
            return base.Channel.LoginOutAsync(systemCode, userAccount);
        }
        
        public bool LoginOutByToken(string token) {
            return base.Channel.LoginOutByToken(token);
        }
        
        public System.Threading.Tasks.Task<bool> LoginOutByTokenAsync(string token) {
            return base.Channel.LoginOutByTokenAsync(token);
        }
    }
}
