//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.34209
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace aZaaS.KStar.Web.ProcessServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ProcessLogData", Namespace="http://schemas.datacontract.org/2004/07/aZaaS.KStar.Wcf")]
    [System.SerializableAttribute()]
    public partial class ProcessLogData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ActionNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ActionTakerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ActionTakerNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ActivityNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CommentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreatedDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ProcInstIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProcessNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TaskOwnerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TaskOwnerNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ActionName {
            get {
                return this.ActionNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ActionNameField, value) != true)) {
                    this.ActionNameField = value;
                    this.RaisePropertyChanged("ActionName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ActionTaker {
            get {
                return this.ActionTakerField;
            }
            set {
                if ((object.ReferenceEquals(this.ActionTakerField, value) != true)) {
                    this.ActionTakerField = value;
                    this.RaisePropertyChanged("ActionTaker");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ActionTakerName {
            get {
                return this.ActionTakerNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ActionTakerNameField, value) != true)) {
                    this.ActionTakerNameField = value;
                    this.RaisePropertyChanged("ActionTakerName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ActivityName {
            get {
                return this.ActivityNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ActivityNameField, value) != true)) {
                    this.ActivityNameField = value;
                    this.RaisePropertyChanged("ActivityName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Comment {
            get {
                return this.CommentField;
            }
            set {
                if ((object.ReferenceEquals(this.CommentField, value) != true)) {
                    this.CommentField = value;
                    this.RaisePropertyChanged("Comment");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreatedDate {
            get {
                return this.CreatedDateField;
            }
            set {
                if ((this.CreatedDateField.Equals(value) != true)) {
                    this.CreatedDateField = value;
                    this.RaisePropertyChanged("CreatedDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ProcInstID {
            get {
                return this.ProcInstIDField;
            }
            set {
                if ((this.ProcInstIDField.Equals(value) != true)) {
                    this.ProcInstIDField = value;
                    this.RaisePropertyChanged("ProcInstID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProcessName {
            get {
                return this.ProcessNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ProcessNameField, value) != true)) {
                    this.ProcessNameField = value;
                    this.RaisePropertyChanged("ProcessName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TaskOwner {
            get {
                return this.TaskOwnerField;
            }
            set {
                if ((object.ReferenceEquals(this.TaskOwnerField, value) != true)) {
                    this.TaskOwnerField = value;
                    this.RaisePropertyChanged("TaskOwner");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TaskOwnerName {
            get {
                return this.TaskOwnerNameField;
            }
            set {
                if ((object.ReferenceEquals(this.TaskOwnerNameField, value) != true)) {
                    this.TaskOwnerNameField = value;
                    this.RaisePropertyChanged("TaskOwnerName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ProcessSetInfo", Namespace="http://schemas.datacontract.org/2004/07/aZaaS.KStar.Wcf.DataContracts")]
    [System.SerializableAttribute()]
    public partial class ProcessSetInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ApproveUrlField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int Configuration_CategoryIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsCommonField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool NotAssignIfApprovedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int OrderNoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProcessFullNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProcessNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ProcessSetIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProcessSetNoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StartUrlField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ViewUrlField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ApproveUrl {
            get {
                return this.ApproveUrlField;
            }
            set {
                if ((object.ReferenceEquals(this.ApproveUrlField, value) != true)) {
                    this.ApproveUrlField = value;
                    this.RaisePropertyChanged("ApproveUrl");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Configuration_CategoryID {
            get {
                return this.Configuration_CategoryIDField;
            }
            set {
                if ((this.Configuration_CategoryIDField.Equals(value) != true)) {
                    this.Configuration_CategoryIDField = value;
                    this.RaisePropertyChanged("Configuration_CategoryID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsCommon {
            get {
                return this.IsCommonField;
            }
            set {
                if ((this.IsCommonField.Equals(value) != true)) {
                    this.IsCommonField = value;
                    this.RaisePropertyChanged("IsCommon");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool NotAssignIfApproved {
            get {
                return this.NotAssignIfApprovedField;
            }
            set {
                if ((this.NotAssignIfApprovedField.Equals(value) != true)) {
                    this.NotAssignIfApprovedField = value;
                    this.RaisePropertyChanged("NotAssignIfApproved");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int OrderNo {
            get {
                return this.OrderNoField;
            }
            set {
                if ((this.OrderNoField.Equals(value) != true)) {
                    this.OrderNoField = value;
                    this.RaisePropertyChanged("OrderNo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProcessFullName {
            get {
                return this.ProcessFullNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ProcessFullNameField, value) != true)) {
                    this.ProcessFullNameField = value;
                    this.RaisePropertyChanged("ProcessFullName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProcessName {
            get {
                return this.ProcessNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ProcessNameField, value) != true)) {
                    this.ProcessNameField = value;
                    this.RaisePropertyChanged("ProcessName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ProcessSetID {
            get {
                return this.ProcessSetIDField;
            }
            set {
                if ((this.ProcessSetIDField.Equals(value) != true)) {
                    this.ProcessSetIDField = value;
                    this.RaisePropertyChanged("ProcessSetID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProcessSetNo {
            get {
                return this.ProcessSetNoField;
            }
            set {
                if ((object.ReferenceEquals(this.ProcessSetNoField, value) != true)) {
                    this.ProcessSetNoField = value;
                    this.RaisePropertyChanged("ProcessSetNo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StartUrl {
            get {
                return this.StartUrlField;
            }
            set {
                if ((object.ReferenceEquals(this.StartUrlField, value) != true)) {
                    this.StartUrlField = value;
                    this.RaisePropertyChanged("StartUrl");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ViewUrl {
            get {
                return this.ViewUrlField;
            }
            set {
                if ((object.ReferenceEquals(this.ViewUrlField, value) != true)) {
                    this.ViewUrlField = value;
                    this.RaisePropertyChanged("ViewUrl");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ProcessServiceReference.IProcessService")]
    public interface IProcessService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProcessService/RecordProcessLog", ReplyAction="http://tempuri.org/IProcessService/RecordProcessLogResponse")]
        void RecordProcessLog(int procInstId, string processName, string taskOwner, string actionTaker, string activityName, string actionName, string comment, string Post);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProcessService/RecordProcessLog", ReplyAction="http://tempuri.org/IProcessService/RecordProcessLogResponse")]
        System.Threading.Tasks.Task RecordProcessLogAsync(int procInstId, string processName, string taskOwner, string actionTaker, string activityName, string actionName, string comment, string Post);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProcessService/GetProcessLogList", ReplyAction="http://tempuri.org/IProcessService/GetProcessLogListResponse")]
        aZaaS.KStar.Web.ProcessServiceReference.ProcessLogData[] GetProcessLogList(int procInstId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProcessService/GetProcessLogList", ReplyAction="http://tempuri.org/IProcessService/GetProcessLogListResponse")]
        System.Threading.Tasks.Task<aZaaS.KStar.Web.ProcessServiceReference.ProcessLogData[]> GetProcessLogListAsync(int procInstId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProcessService/GetActivityParticipants", ReplyAction="http://tempuri.org/IProcessService/GetActivityParticipantsResponse")]
        string[] GetActivityParticipants(int procInstId, string activityName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProcessService/GetActivityParticipants", ReplyAction="http://tempuri.org/IProcessService/GetActivityParticipantsResponse")]
        System.Threading.Tasks.Task<string[]> GetActivityParticipantsAsync(int procInstId, string activityName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProcessService/GetActivityNotPopParticipants", ReplyAction="http://tempuri.org/IProcessService/GetActivityNotPopParticipantsResponse")]
        string[] GetActivityNotPopParticipants(int procInstId, string activityName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProcessService/GetActivityNotPopParticipants", ReplyAction="http://tempuri.org/IProcessService/GetActivityNotPopParticipantsResponse")]
        System.Threading.Tasks.Task<string[]> GetActivityNotPopParticipantsAsync(int procInstId, string activityName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProcessService/HasAttachActivityParticipant", ReplyAction="http://tempuri.org/IProcessService/HasAttachActivityParticipantResponse")]
        bool HasAttachActivityParticipant(int procInstId, string activityName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProcessService/HasAttachActivityParticipant", ReplyAction="http://tempuri.org/IProcessService/HasAttachActivityParticipantResponse")]
        System.Threading.Tasks.Task<bool> HasAttachActivityParticipantAsync(int procInstId, string activityName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProcessService/GetActivityParticipantEmail", ReplyAction="http://tempuri.org/IProcessService/GetActivityParticipantEmailResponse")]
        string GetActivityParticipantEmail(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProcessService/GetActivityParticipantEmail", ReplyAction="http://tempuri.org/IProcessService/GetActivityParticipantEmailResponse")]
        System.Threading.Tasks.Task<string> GetActivityParticipantEmailAsync(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProcessService/GetActivityParticipantEmails", ReplyAction="http://tempuri.org/IProcessService/GetActivityParticipantEmailsResponse")]
        string GetActivityParticipantEmails(int procInstId, string activityName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProcessService/GetActivityParticipantEmails", ReplyAction="http://tempuri.org/IProcessService/GetActivityParticipantEmailsResponse")]
        System.Threading.Tasks.Task<string> GetActivityParticipantEmailsAsync(int procInstId, string activityName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProcessService/GetActivityParticipantCCEmails", ReplyAction="http://tempuri.org/IProcessService/GetActivityParticipantCCEmailsResponse")]
        string GetActivityParticipantCCEmails(int procInstId, string activityName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProcessService/GetActivityParticipantCCEmails", ReplyAction="http://tempuri.org/IProcessService/GetActivityParticipantCCEmailsResponse")]
        System.Threading.Tasks.Task<string> GetActivityParticipantCCEmailsAsync(int procInstId, string activityName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProcessService/GetProcessConfigByFullName", ReplyAction="http://tempuri.org/IProcessService/GetProcessConfigByFullNameResponse")]
        aZaaS.KStar.Web.ProcessServiceReference.ProcessSetInfo GetProcessConfigByFullName(string fullname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProcessService/GetProcessConfigByFullName", ReplyAction="http://tempuri.org/IProcessService/GetProcessConfigByFullNameResponse")]
        System.Threading.Tasks.Task<aZaaS.KStar.Web.ProcessServiceReference.ProcessSetInfo> GetProcessConfigByFullNameAsync(string fullname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProcessService/GetProcessConfigByProcInstId", ReplyAction="http://tempuri.org/IProcessService/GetProcessConfigByProcInstIdResponse")]
        aZaaS.KStar.Web.ProcessServiceReference.ProcessSetInfo GetProcessConfigByProcInstId(int procInstId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProcessService/GetProcessConfigByProcInstId", ReplyAction="http://tempuri.org/IProcessService/GetProcessConfigByProcInstIdResponse")]
        System.Threading.Tasks.Task<aZaaS.KStar.Web.ProcessServiceReference.ProcessSetInfo> GetProcessConfigByProcInstIdAsync(int procInstId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProcessService/SaveKStarFormEndCCUser", ReplyAction="http://tempuri.org/IProcessService/SaveKStarFormEndCCUserResponse")]
        void SaveKStarFormEndCCUser(int procInstId, string activityName, string comment);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProcessService/SaveKStarFormEndCCUser", ReplyAction="http://tempuri.org/IProcessService/SaveKStarFormEndCCUserResponse")]
        System.Threading.Tasks.Task SaveKStarFormEndCCUserAsync(int procInstId, string activityName, string comment);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProcessService/SaveKStarFormReworkCCUser", ReplyAction="http://tempuri.org/IProcessService/SaveKStarFormReworkCCUserResponse")]
        void SaveKStarFormReworkCCUser(int procInstId, string activityName, string comment);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProcessService/SaveKStarFormReworkCCUser", ReplyAction="http://tempuri.org/IProcessService/SaveKStarFormReworkCCUserResponse")]
        System.Threading.Tasks.Task SaveKStarFormReworkCCUserAsync(int procInstId, string activityName, string comment);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProcessService/LienRule", ReplyAction="http://tempuri.org/IProcessService/LienRuleResponse")]
        bool LienRule(int procInstId, string LienName, string activityName, string action);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProcessService/LienRule", ReplyAction="http://tempuri.org/IProcessService/LienRuleResponse")]
        System.Threading.Tasks.Task<bool> LienRuleAsync(int procInstId, string LienName, string activityName, string action);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IProcessServiceChannel : aZaaS.KStar.Web.ProcessServiceReference.IProcessService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ProcessServiceClient : System.ServiceModel.ClientBase<aZaaS.KStar.Web.ProcessServiceReference.IProcessService>, aZaaS.KStar.Web.ProcessServiceReference.IProcessService {
        
        public ProcessServiceClient() {
        }
        
        public ProcessServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ProcessServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ProcessServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ProcessServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void RecordProcessLog(int procInstId, string processName, string taskOwner, string actionTaker, string activityName, string actionName, string comment, string Post) {
            base.Channel.RecordProcessLog(procInstId, processName, taskOwner, actionTaker, activityName, actionName, comment, Post);
        }
        
        public System.Threading.Tasks.Task RecordProcessLogAsync(int procInstId, string processName, string taskOwner, string actionTaker, string activityName, string actionName, string comment, string Post) {
            return base.Channel.RecordProcessLogAsync(procInstId, processName, taskOwner, actionTaker, activityName, actionName, comment, Post);
        }
        
        public aZaaS.KStar.Web.ProcessServiceReference.ProcessLogData[] GetProcessLogList(int procInstId) {
            return base.Channel.GetProcessLogList(procInstId);
        }
        
        public System.Threading.Tasks.Task<aZaaS.KStar.Web.ProcessServiceReference.ProcessLogData[]> GetProcessLogListAsync(int procInstId) {
            return base.Channel.GetProcessLogListAsync(procInstId);
        }
        
        public string[] GetActivityParticipants(int procInstId, string activityName) {
            return base.Channel.GetActivityParticipants(procInstId, activityName);
        }
        
        public System.Threading.Tasks.Task<string[]> GetActivityParticipantsAsync(int procInstId, string activityName) {
            return base.Channel.GetActivityParticipantsAsync(procInstId, activityName);
        }
        
        public string[] GetActivityNotPopParticipants(int procInstId, string activityName) {
            return base.Channel.GetActivityNotPopParticipants(procInstId, activityName);
        }
        
        public System.Threading.Tasks.Task<string[]> GetActivityNotPopParticipantsAsync(int procInstId, string activityName) {
            return base.Channel.GetActivityNotPopParticipantsAsync(procInstId, activityName);
        }
        
        public bool HasAttachActivityParticipant(int procInstId, string activityName) {
            return base.Channel.HasAttachActivityParticipant(procInstId, activityName);
        }
        
        public System.Threading.Tasks.Task<bool> HasAttachActivityParticipantAsync(int procInstId, string activityName) {
            return base.Channel.HasAttachActivityParticipantAsync(procInstId, activityName);
        }
        
        public string GetActivityParticipantEmail(string userName) {
            return base.Channel.GetActivityParticipantEmail(userName);
        }
        
        public System.Threading.Tasks.Task<string> GetActivityParticipantEmailAsync(string userName) {
            return base.Channel.GetActivityParticipantEmailAsync(userName);
        }
        
        public string GetActivityParticipantEmails(int procInstId, string activityName) {
            return base.Channel.GetActivityParticipantEmails(procInstId, activityName);
        }
        
        public System.Threading.Tasks.Task<string> GetActivityParticipantEmailsAsync(int procInstId, string activityName) {
            return base.Channel.GetActivityParticipantEmailsAsync(procInstId, activityName);
        }
        
        public string GetActivityParticipantCCEmails(int procInstId, string activityName) {
            return base.Channel.GetActivityParticipantCCEmails(procInstId, activityName);
        }
        
        public System.Threading.Tasks.Task<string> GetActivityParticipantCCEmailsAsync(int procInstId, string activityName) {
            return base.Channel.GetActivityParticipantCCEmailsAsync(procInstId, activityName);
        }
        
        public aZaaS.KStar.Web.ProcessServiceReference.ProcessSetInfo GetProcessConfigByFullName(string fullname) {
            return base.Channel.GetProcessConfigByFullName(fullname);
        }
        
        public System.Threading.Tasks.Task<aZaaS.KStar.Web.ProcessServiceReference.ProcessSetInfo> GetProcessConfigByFullNameAsync(string fullname) {
            return base.Channel.GetProcessConfigByFullNameAsync(fullname);
        }
        
        public aZaaS.KStar.Web.ProcessServiceReference.ProcessSetInfo GetProcessConfigByProcInstId(int procInstId) {
            return base.Channel.GetProcessConfigByProcInstId(procInstId);
        }
        
        public System.Threading.Tasks.Task<aZaaS.KStar.Web.ProcessServiceReference.ProcessSetInfo> GetProcessConfigByProcInstIdAsync(int procInstId) {
            return base.Channel.GetProcessConfigByProcInstIdAsync(procInstId);
        }
        
        public void SaveKStarFormEndCCUser(int procInstId, string activityName, string comment) {
            base.Channel.SaveKStarFormEndCCUser(procInstId, activityName, comment);
        }
        
        public System.Threading.Tasks.Task SaveKStarFormEndCCUserAsync(int procInstId, string activityName, string comment) {
            return base.Channel.SaveKStarFormEndCCUserAsync(procInstId, activityName, comment);
        }
        
        public void SaveKStarFormReworkCCUser(int procInstId, string activityName, string comment) {
            base.Channel.SaveKStarFormReworkCCUser(procInstId, activityName, comment);
        }
        
        public System.Threading.Tasks.Task SaveKStarFormReworkCCUserAsync(int procInstId, string activityName, string comment) {
            return base.Channel.SaveKStarFormReworkCCUserAsync(procInstId, activityName, comment);
        }
        
        public bool LienRule(int procInstId, string LienName, string activityName, string action) {
            return base.Channel.LienRule(procInstId, LienName, activityName, action);
        }
        
        public System.Threading.Tasks.Task<bool> LienRuleAsync(int procInstId, string LienName, string activityName, string action) {
            return base.Channel.LienRuleAsync(procInstId, LienName, activityName, action);
        }
    }
}
