<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="numberofflows" xml:space="preserve">
    <value>个流程</value>
  </data>
  <data name="numberofversions" xml:space="preserve">
    <value>个版本</value>
  </data>
  <data name="Processconfiguration" xml:space="preserve">
    <value>流程配置</value>
  </data>
  <data name="uninitialized" xml:space="preserve">
    <value>未初始化</value>
  </data>
  <data name="Cancel" xml:space="preserve">
    <value>取消</value>
  </data>
  <data name="Confirm" xml:space="preserve">
    <value>确定</value>
  </data>
  <data name="DisplayName" xml:space="preserve">
    <value>名称</value>
  </data>
  <data name="Description" xml:space="preserve">
    <value>描述</value>
  </data>
  <data name="DeleteCategory" xml:space="preserve">
    <value>删除分类</value>
  </data>
  <data name="EditCategory" xml:space="preserve">
    <value>编辑分类</value>
  </data>
  <data name="AddCategory" xml:space="preserve">
    <value>新增分类</value>
  </data>
  <data name="CantDeleteCategory" xml:space="preserve">
    <value>"不能删除已存在流程的分类"</value>
  </data>
  <data name="ConfirmDeleteCategory" xml:space="preserve">
    <value>"是否确定删除该分类?"</value>
  </data>
  <data name="ExistsCategory" xml:space="preserve">
    <value>"已存在分类名称"</value>
  </data>
  <data name="AddCategoryTitle" xml:space="preserve">
    <value>"新增分类"</value>
  </data>
  <data name="EditCategoryTitle" xml:space="preserve">
    <value>"编辑分类"</value>
  </data>
  <data name="ImportVersionTitle" xml:space="preserve">
    <value>"导入版本"</value>
  </data>
  <data name="SelectFiles" xml:space="preserve">
    <value>"选择文件"</value>
  </data>
  <data name="SpecialCharTip" xml:space="preserve">
    <value>"存在特殊字符"</value>
  </data>
  <data name="LengthTip" xml:space="preserve">
    <value>"长度超过限制"</value>
  </data>
  <data name="NonConfiguration_Category" xml:space="preserve">
    <value>未初始化的流程</value>
  </data>
  <data name="ConfirmSynchronizeVersion" xml:space="preserve">
    <value>"是否确定同步该流程版本?"</value>
  </data>
  <data name="SynchronizeVersion" xml:space="preserve">
    <value>同步版本</value>
  </data>
  <data name="IsNeedUpdateConfigurationVersion" xml:space="preserve">
    <value>'该流程需要执行版本同步，请在流程上，点击右键，执行：同步版本'</value>
  </data>
  <data name="ProcessUnbundling" xml:space="preserve">
    <value>流程解绑</value>
  </data>
  <data name="ConfirmProcessUnbundling" xml:space="preserve">
    <value>"是否确定解绑该流程?"</value>
  </data>
</root>