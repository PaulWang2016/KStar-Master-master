<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Add" xml:space="preserve">
    <value>Add</value>
  </data>
  <data name="AddCategory" xml:space="preserve">
    <value>Add Category</value>
  </data>
  <data name="Added" xml:space="preserve">
    <value>Added</value>
  </data>
  <data name="AddReport" xml:space="preserve">
    <value>Add Report</value>
  </data>
  <data name="AddtoFavorites" xml:space="preserve">
    <value>Add to Favorites</value>
  </data>
  <data name="Cancel" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="CategoryName" xml:space="preserve">
    <value>Category Name :</value>
  </data>
  <data name="Changethename" xml:space="preserve">
    <value>Change the name</value>
  </data>
  <data name="Comment" xml:space="preserve">
    <value>Comment :</value>
  </data>
  <data name="Companylevel" xml:space="preserve">
    <value>Company level</value>
  </data>
  <data name="Confirm" xml:space="preserve">
    <value>Confirm</value>
  </data>
  <data name="CreatepositionR" xml:space="preserve">
    <value>Create position (R):</value>
  </data>
  <data name="DateAdded" xml:space="preserve">
    <value>Date Added:</value>
  </data>
  <data name="Delete" xml:space="preserve">
    <value>Delete</value>
  </data>
  <data name="Departmental" xml:space="preserve">
    <value>Departmental</value>
  </data>
  <data name="Filter" xml:space="preserve">
    <value>Filter</value>
  </data>
  <data name="Financecategory" xml:space="preserve">
    <value>Finance category</value>
  </data>
  <data name="FinanceDepartment" xml:space="preserve">
    <value>Finance Department</value>
  </data>
  <data name="Internalnumber" xml:space="preserve">
    <value>Internal number:</value>
  </data>
  <data name="Level" xml:space="preserve">
    <value>Level:</value>
  </data>
  <data name="NameN" xml:space="preserve">
    <value>Name(N):</value>
  </data>
  <data name="NameReview" xml:space="preserve">
    <value>Name Review：</value>
  </data>
  <data name="Ofsuccess" xml:space="preserve">
    <value>Of success</value>
  </data>
  <data name="Personnel" xml:space="preserve">
    <value>Personnel</value>
  </data>
  <data name="Personnelcategory" xml:space="preserve">
    <value>Personnel category</value>
  </data>
  <data name="PresidentsOffice" xml:space="preserve">
    <value>President's Office</value>
  </data>
  <data name="ProcessPerformanceClass" xml:space="preserve">
    <value>Process Performance Class</value>
  </data>
  <data name="Rating" xml:space="preserve">
    <value>Rating：</value>
  </data>
  <data name="ReportDescription" xml:space="preserve">
    <value>Report Description:</value>
  </data>
  <data name="ReportManagementCenter" xml:space="preserve">
    <value>Report Management Center</value>
  </data>
  <data name="ReportName" xml:space="preserve">
    <value>Report Name</value>
  </data>
  <data name="ReportThumbnails" xml:space="preserve">
    <value>Report Thumbnails:</value>
  </data>
  <data name="ReportUrl" xml:space="preserve">
    <value>Report Url:</value>
  </data>
  <data name="Responsibledepartments" xml:space="preserve">
    <value>Responsible departments</value>
  </data>
  <data name="shelves" xml:space="preserve">
    <value>shelves</value>
  </data>
  <data name="Sortbydepartment" xml:space="preserve">
    <value>Sort by department</value>
  </data>
  <data name="Sortbylevel" xml:space="preserve">
    <value>Sort by level</value>
  </data>
  <data name="Sortbyrating" xml:space="preserve">
    <value>Sort by rating</value>
  </data>
  <data name="Sortbytime" xml:space="preserve">
    <value>Sort by time</value>
  </data>
  <data name="SortbyType" xml:space="preserve">
    <value>Sort by Type</value>
  </data>
  <data name="Stafflevel" xml:space="preserve">
    <value>Staff level</value>
  </data>
  <data name="Type" xml:space="preserve">
    <value>Type:</value>
  </data>
  <data name="Upload" xml:space="preserve">
    <value>Upload</value>
  </data>
  <data name="Whethertheshelf" xml:space="preserve">
    <value>Whether the shelf:</value>
  </data>
  <data name="YIPC" xml:space="preserve">
    <value>You can collect the report into favorite, if you wanna access the favorite, please click the "Collect" button</value>
  </data>
  <data name="ExistsCategoryNameTip" xml:space="preserve">
    <value>Name already exists</value>
  </data>
  <data name="RequiredCategoryNameTip" xml:space="preserve">
    <value>Name Required!</value>
  </data>
  <data name="AllCategories" xml:space="preserve">
    <value>All Categories</value>
  </data>
  <data name="FavNameFormatError" xml:space="preserve">
    <value>The name does not comply with the requirements</value>
  </data>
  <data name="ErrorReportUrlTip" xml:space="preserve">
    <value>Url format error!</value>
  </data>
  <data name="RequiredReportUrlTip" xml:space="preserve">
    <value>Url is required!</value>
  </data>
  <data name="SelectResponsibledepartments" xml:space="preserve">
    <value>请选择责任部门</value>
  </data>
</root>